<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Overview on Command Launcher</title><link>https://criteo.github.io/command-launcher/docs/overview/</link><description>Recent content in Overview on Command Launcher</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Sun, 02 Oct 2022 17:10:15 +0200</lastBuildDate><atom:link href="https://criteo.github.io/command-launcher/docs/overview/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction</title><link>https://criteo.github.io/command-launcher/docs/overview/introduction/</link><pubDate>Sun, 02 Oct 2022 17:15:37 +0200</pubDate><guid>https://criteo.github.io/command-launcher/docs/overview/introduction/</guid><description>What is command launcher? #
Command launcher is a small footprint, rich feature CLI management tool for both enterprise and individual CLI developers. It eases the command line tool development by providing built-in common functionalities like: monitoring, progressive rollout, auto-completion, credential management, and more to your commands.
Why a command launcher? #
At Criteo, we have many teams who provides command line applications for developers. These CLI providers repeatly handle the same features and functionalities for their CLI apps, such as auto-completion, credential management, release, delivery, monitoring, etc.</description></item><item><title>Built-in commands</title><link>https://criteo.github.io/command-launcher/docs/overview/built-in-commands/</link><pubDate>Sun, 02 Oct 2022 18:41:12 +0200</pubDate><guid>https://criteo.github.io/command-launcher/docs/overview/built-in-commands/</guid><description>config #
Get or set command launcher configuration.
Use cola config to list all configurations.
Use cola config [key] to get one configuration.
Use cola config [key] [value] to set one configuration.
completion #
setup auto completion. See help to get instructions:
cola completion --help login #
Store your credentials securely and pass them to managed commands when requested and under your agreements. More details see: Managed resources
update #
Check updates for command launcher and managed commands.</description></item><item><title>CLI provider guide</title><link>https://criteo.github.io/command-launcher/docs/overview/provider-guide/</link><pubDate>Sun, 02 Oct 2022 18:45:11 +0200</pubDate><guid>https://criteo.github.io/command-launcher/docs/overview/provider-guide/</guid><description>NOTE: in this page, we use cola as the command launcher&amp;rsquo;s binary name, you can build your own command launcher with a different name. See: build from source
Command launcher synchronizes commands from the remote command repository. Commands are packaged into a package, then uploaded to remote command repository. The following diagram shows this architecture.
┌─────────────────────────────┐ │ Remote Command Repository │ └──────────────┬──────────────┘ ┌───────────┴────────────┐ ▼ ▼ ┌────────────┐ ┌───────────┐ │ pacakge 1 │ │ pakcage 2 │ └────────────┘ └───────────┘ │ │ ┌───────┤─────────┐ ┌───┴────┐ ▼ ▼ ▼ ▼ ▼ ┌───────┐┌───────┐┌───────┐ ┌───────┐┌───────┐ │ cmd A ││ cmd B ││ cmd C │ │ cmd D ││ cmd E │ └───────┘└───────┘└───────┘ └───────┘└───────┘ Remote command repository #
A remote command repository is a simple http server with following endpoints:</description></item><item><title>Configuration</title><link>https://criteo.github.io/command-launcher/docs/overview/config/</link><pubDate>Sun, 02 Oct 2022 20:21:40 +0200</pubDate><guid>https://criteo.github.io/command-launcher/docs/overview/config/</guid><description>List of configurations #
Config Name Type Description ci_enabled bool whether the CI mode is enabled or not command_repository_base_url string the base url of the remote repository, it must contain a /index.json endpoint to list the available pacakges command_update_enabled bool whether auto update managed commands or not dropin_folder string the absolute path of the dropin folder enable_user_consent bool whether enable the user consent. Be caution, when set to false, all resources are allowed to pass to the managed commands.</description></item><item><title>Manifest.mf specification</title><link>https://criteo.github.io/command-launcher/docs/overview/manifest/</link><pubDate>Sun, 02 Oct 2022 19:02:32 +0200</pubDate><guid>https://criteo.github.io/command-launcher/docs/overview/manifest/</guid><description>What is a manifest.mf file? #
A manifest.mf file is a file located at the root of your command launcher package. It describes the commands packaged in the zip file. When cola installs a package, it reads the manifest file and registers the commands in the manifest file.
Format of manifest.mf #
manifest.mf is in JSON or YAML format. It contains 3 fields:
pkgName: a unique name of your package version: the version of your package cmds: a list of command definition, see command definition section Here is an example</description></item><item><title>Enterprise Setup Guide</title><link>https://criteo.github.io/command-launcher/docs/overview/enterprise/</link><pubDate>Sun, 30 Oct 2022 11:34:47 +0200</pubDate><guid>https://criteo.github.io/command-launcher/docs/overview/enterprise/</guid><description>Setup remote configuration #
For enterprise use case, it is common to enforce some configurations for all users. For example, the remote registry to synchronise local commands. You can specify a remote configuration file using COLA_REMOTE_CONFIG_URL environment variable for this purpose.
export COLA_REMOTE_CONFIG_URL=https://remote-server/remote-config.json The remote configuration is a JSON file contains the configuration items that you would like to enforce. Command launcher will override the local configuration item when the item is defined in the remote configuration.</description></item><item><title>Dropin package</title><link>https://criteo.github.io/command-launcher/docs/overview/dropin/</link><pubDate>Sun, 02 Oct 2022 19:29:47 +0200</pubDate><guid>https://criteo.github.io/command-launcher/docs/overview/dropin/</guid><description>What is dropin package? and why do I need it? #
A dropin package is a package that are not managed by the remote repository. It is only available on the developer&amp;rsquo;s machine. It allows developers to integrate their own scripts/tools into command launcher to benefit the feature provided by the command launcher, for example, auto-complete, monitoring etc.
For example, you probably already has lots of shell scripts to maintain your infrastructure.</description></item><item><title>Manage resources</title><link>https://criteo.github.io/command-launcher/docs/overview/resources/</link><pubDate>Sun, 02 Oct 2022 19:21:34 +0200</pubDate><guid>https://criteo.github.io/command-launcher/docs/overview/resources/</guid><description>What is resources #
Resources are the information collected by command launcher. One good example is the user name and password from the built-in login command.
Some of these information require user consent to access them, a command needs to explicitly request the access to these resources through the requestedResources property in the manifest.
Others are automatically passed to the command.
Command Launcher passes resources to managed command through environment variables.</description></item><item><title>System package</title><link>https://criteo.github.io/command-launcher/docs/overview/system-package/</link><pubDate>Sun, 02 Oct 2022 21:36:35 +0200</pubDate><guid>https://criteo.github.io/command-launcher/docs/overview/system-package/</guid><description>What is a system package #
System package is like other command launcher packages, with one manifest.mf file in it to describe the commands and contains binaries, scripts, and resources to execute these commands.
The difference is that a system package contains system commands, and it can be only installed from a central repository (not as a dropin package).
You can customize your command launcher by providing a system package. In a system package, you can define system commands as functional hooks to extend command launcher&amp;rsquo;s built-in functionalities, for example, login and metrics.</description></item><item><title>Variable in manifest</title><link>https://criteo.github.io/command-launcher/docs/overview/variable/</link><pubDate>Sun, 02 Oct 2022 21:36:35 +0200</pubDate><guid>https://criteo.github.io/command-launcher/docs/overview/variable/</guid><description>The two common use cases of integrating commands in command launcher are:
Reference files that are located in the package itself Provide system/architecture-aware commands, for example, .sh script for linux, and .bat script for windows To cover these use cases, in certain fields of the manifest file, predefined variables can used in the field values.
Available Variables #
Variable Name Variable Description PackageDir The absolute path of the package Root Same as &amp;ldquo;PackageDir&amp;rdquo; variable Cache Same as &amp;ldquo;PackageDir&amp;rdquo; variable Os The OS, &amp;ldquo;windows&amp;rdquo;, &amp;ldquo;linux&amp;rdquo;, and &amp;ldquo;darwin&amp;rdquo; Arch The system architecture: &amp;ldquo;arm64&amp;rdquo;, &amp;ldquo;amd64&amp;rdquo; Binary The binary file name of the command launcher Extension The system-aware binary extension, &amp;quot;&amp;quot; for linux, &amp;ldquo;.</description></item></channel></rss>