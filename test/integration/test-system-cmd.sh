#!/bin/bash

# availeble environment varibale
# CL_PATH: the path of the command launcher binary
# CL_HOME: the path of the command launcher home directory
# OUTPUT_DIR: the output folder
SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

METRICS_FILE=$OUTPUT_DIR/../metrics.txt

# clean up the dropin folder
rm -rf $CL_HOME/dropins
mkdir -p $CL_HOME/dropins
cp -R $SCRIPT_DIR/../packages-src/login $CL_HOME/dropins

# clean up local repository, remove local repo + configuration
rm -rf $CL_HOME/current
rm -f $CL_HOME/config.json
rm -f $OUTPUT_DIR/../metrics.txt


# enable metrics
$CL_PATH config usage_metrics_enabled true

# setup remote package using local file
echo "> test download remote package with local filer"
# work around to make sure the native path on windows
NATIVE_SCRIPT_DIR=${SCRIPT_DIR/\/c\//C:/}
NATIVE_SCRIPT_DIR=${NATIVE_SCRIPT_DIR/\/d\//D:/}
NATIVE_SCRIPT_DIR=${NATIVE_SCRIPT_DIR/\/e\//E:/}
NATIVE_SCRIPT_DIR=${NATIVE_SCRIPT_DIR/\/f\//F:/}
echo $NATIVE_SCRIPT_DIR

# enable package setup hook
$CL_PATH config enable_package_setup_hook true

RESULT=$($OUTPUT_DIR/cl config command_repository_base_url file://${NATIVE_SCRIPT_DIR}/../remote-repo)
RESULT=$($CL_PATH)

echo "$RESULT"

echo "$RESULT" | grep -q "hello"
if [ $? -eq 0 ]; then
  # ok
  echo "OK"
else
  echo "KO - hello command should exist"
  exit 1
fi


echo "> test package setup hook"
echo "$RESULT" | grep -q "calling setup"
if [ $? -eq 0 ]; then
  # ok
  echo "OK"
else
  echo "KO - package setup hook should be called"
  exit 1
fi


echo "> test system command should not exist"
echo "$RESULT" | grep -q "metrics"
if [ $? -ne 0 ]; then
  # ok
  echo "OK"
else
  echo "KO - system command 'metrics' should not exist"
  exit 1
fi

# enable experimental command to test broken package setup hook
echo "> test enable experimental command to test broken package setup"
$CL_PATH config experimental_command_enabled true
echo "* should handle broken package setup hook"
RESULT=$($CL_PATH update --package 2>&1)
if [ $? -ne 0 ]; then
  echo "OK"
else
  echo "KO - should handle broken package setup hook"
  exit 1
fi
echo "* should print error message"
echo "$RESULT" | grep -q "cannot install the command package fake-wrong-setup"
if [ $? -eq 0 ]; then
  echo "OK"
else
  echo "KO - should print error message"
  exit 1
fi

echo "> test login extension without setup system package"
echo "* should NOT use username returned from extension"
RESULT=$($CL_PATH login -u test-user -p test-password)
RESULT=$($CL_PATH print-credentials-with-consent)
echo "$RESULT" | grep -q "SECRET_1"
if [ $? -ne 0 ]; then
  # ok
  echo "OK"
else
  echo "KO - should NOT use username returned from extension"
  exit 1
fi

echo "* should NOT use password returned from extension"
echo "$RESULT" | grep -q "SECRET_2"
if [ $? -ne 0 ]; then
  # ok
  echo "OK"
else
  echo "KO - should NOT use password returned from extension"
  exit 1
fi

echo "> test metrics extension without setup system package config"
if [ -f $METRICS_FILE ]; then
  echo "KO - should NOT have extension metrics file generated"
  exit 1
else
  echo "OK"
fi

echo "> test login extension enabled by system package config"
# set system package name
RESULT=$($CL_PATH config system_package system-pkg-demo)
$CL_PATH login -u test-user -p test-password
RESULT=$($CL_PATH print-credentials-with-consent)

echo "* should use username returned from extension"
echo "$RESULT" | grep -q "SECRET_1"
if [ $? -eq 0 ]; then
  # ok
  echo "OK"
else
  echo "KO - should use username returned from extension"
  exit 1
fi

echo "* should use password returned from extension"
echo "$RESULT" | grep -q "SECRET_2"
if [ $? -eq 0 ]; then
  # ok
  echo "OK"
else
  echo "KO - should use password returned from extension"
  exit 1
fi

echo "* should use login token returned from extension"
echo "$RESULT"
echo "$RESULT" | grep -q "SECRET_3"
if [ $? -eq 0 ]; then
  # ok
  echo "OK"
else
  echo "KO - should use auth_token returned from extension"
  exit 1
fi

echo "> test metrics extension with setup system package config"
echo "* should have metrics file generated by extension"
if [ -f $METRICS_FILE ]; then
  echo "OK"
else
  echo "KO - should have extension metrics file generated"
  exit 1
fi

echo "> test metrics content"
RESULT=$(cat $OUTPUT_DIR/../metrics.txt)
echo "$RESULT" | grep 'default default default default'
if [ $? -eq 0 ]; then
  echo "OK"
else
  echo "KO - should have default command in metrics"
  exit 1
fi

echo "$RESULT" | grep 'dropin print-credentials default print-credentials-with-consent'
if [ $? -eq 0 ]; then
  echo "OK"
else
  echo "KO - should have root exectuble command in metrics"
  exit 1
fi

# cleanup
rm -f $OUTPUT_DIR/../metrics.txt
